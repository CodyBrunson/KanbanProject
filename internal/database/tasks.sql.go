// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tasks.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createNewTask = `-- name: CreateNewTask :one
INSERT INTO tasks (id, title, description, status, created_at, updated_at)
VALUES (
gen_random_uuid(), $1, $2, $3, NOW(), NOW()
)
RETURNING id, title, description, status, created_at, updated_at, completed_at, deleted_at
`

type CreateNewTaskParams struct {
	Title       string
	Description string
	Status      string
}

func (q *Queries) CreateNewTask(ctx context.Context, arg CreateNewTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createNewTask, arg.Title, arg.Description, arg.Status)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
UPDATE tasks
SET status = 'DELETED', updated_at = NOW(), deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const finishTask = `-- name: FinishTask :exec
UPDATE tasks
SET status = 'FINISHED', updated_at = NOW(), completed_at = NOW()
WHERE id = $1
`

func (q *Queries) FinishTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, finishTask, id)
	return err
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT id, title, description, status, created_at, updated_at, completed_at, deleted_at FROM tasks
`

func (q *Queries) GetAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, title, description, status, created_at, updated_at, completed_at, deleted_at FROM tasks
WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id uuid.UUID) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateTaskByID = `-- name: UpdateTaskByID :exec
UPDATE tasks
SET title = $2, description = $3, updated_at = NOW()
WHERE id = $1
`

type UpdateTaskByIDParams struct {
	ID          uuid.UUID
	Title       string
	Description string
}

func (q *Queries) UpdateTaskByID(ctx context.Context, arg UpdateTaskByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskByID, arg.ID, arg.Title, arg.Description)
	return err
}
